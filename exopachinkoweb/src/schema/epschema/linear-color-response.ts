// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { LinearColor } from '../epschema/linear-color.js';


export class LinearColorResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LinearColorResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLinearColorResponse(bb:flatbuffers.ByteBuffer, obj?:LinearColorResponse):LinearColorResponse {
  return (obj || new LinearColorResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLinearColorResponse(bb:flatbuffers.ByteBuffer, obj?:LinearColorResponse):LinearColorResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LinearColorResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

linearColor(obj?:LinearColor):LinearColor|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new LinearColor()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startLinearColorResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSessionId(builder:flatbuffers.Builder, sessionId:number) {
  builder.addFieldInt32(0, sessionId, 0);
}

static addLinearColor(builder:flatbuffers.Builder, linearColorOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, linearColorOffset, 0);
}

static endLinearColorResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
